from espressoApi.espressoConnect import EspressoConnect

api_key = "Ypur Api Key"
vendor_key=""           # vendor key for vendor login otherwise keep it null
state=12345
espressoApi = EspressoConnect(api_key)
print(espressoApi.login_url())
request_token="Your request token"
secret_key="Your secret key"

"""Use generate session method for decrypt and re-encrypt the request token value """
session = espressoApi.generate_session(request_token,secret_key)

"""Use get_access_token for generating access token """
access_token=espressoApi.get_access_token(api_key,session,vendor_key,state)
print(access_token)

access_token = 'Your access token value'
espressoApi = EspressoConnect(api_key=api_key,access_token=access_token)
print(espressoApi.requestHeaders())

# Place order history

orderparams={
  "customerId": "XXXXXX",
  "scripCode": 1314,
  "tradingSymbol": "USDINR",
  "exchange": "RN",
  "transactionType": "B",
  "quantity": 1,
  "disclosedQty": 0,
  "price": "0",
  "triggerPrice": "0",
  "rmsCode": "ANY",
  "afterHour": "N",
  "orderType": "NORMAL",
  "channelUser": "XXXXXX",
  "validity": "GFD",
  "requestType": "NEW",
  "productType": "CNF",
    "instrumentType": "FUTCUR",
    "strikePrice": "-1",
    "expiry": "28/03/2023",
    "optionType": "XX"
}
order=espressoApi.placeOrder(orderparams)
print("PlaceOrder: {}".format(order))

# modify order
orderparams={
  "customerId": "XXXXXX",
    "orderId": 8013942,
  "scripCode": 53256,
  "tradingSymbol": "NIFTY",
  "exchange": "NF",
  "transactionType": "S",
  "quantity": 100,
  "disclosedQty": 0,
  "price": "4.95",
  "triggerPrice": "0",
  "rmsCode": "ANY",
  "afterHour": "N",
  "orderType": "NORMAL",
  "channelUser": "XXXXXX",
  "validity": "GFD",
  "requestType": "MODIFY",
  "productType": "CNF",
    "instrumentType": "OI",
    "strikePrice": "16200",
    "expiry": "29/03/2023",
    "optionType": "PE"
}

order=espressoApi.modifyOrder(orderparams)
print("ModifyOrder: {}".format(order))

# cancel order
orderparams={
    "orderId": "3466107",
    "customerId": "XXXXXX",
    "scripCode": 2475,
    "tradingSymbol": "ONGC",
    "exchange": "NC",
    "transactionType": "B",
    "quantity": 1,
    "disclosedQty": 0,
    "executedQty": 0,
    "price": "95",
    "triggerPrice": "0",
    "rmsCode": "SKNSE1",
    "afterHour": "N",
    "orderType": "NORMAL",
    "channelUser": "XXXXXXX",
    "validity": "GFD",
    "requestType": "CANCEL",
    "productType": "CNC"
  }

order=espressoApi.cancelOrder(orderparams)
print("CancelOrder: {}".format(order))

# Funds Details
exchange="MX"
customerId="XXXXXX"
order=espressoApi.funds(exchange, customerId)
print("Retrieves Funds: {}".format(order))

# cancel order by orderid only

orderid=8013942
order=espressoApi.cancelOrderById(orderid)
print("Cancelbyid: {}".format(order))

# Retrieves all orders for the day

customerId=20000007
order=espressoApi.reports(customerId)
print("Order Reports: {}".format(order))

# Retrieve history of an given order
exchange="RN"
customerId="XXXXXX"
orderId=8016327
order=espressoApi.exchange(exchange, customerId, orderId)
print("Order Details: {}".format(order))

# Retrieves all positions

customerId="XXXXXX"
order=espressoApi.trades(customerId)
print("Postion Reports: {}".format(order))



# Retrieves the trade  generated by an order
exchange="NC"
customerId="XXXXXXX"
orderId=3464606
order=espressoApi.exchangetrades(exchange, customerId, orderId)
print("Trade Generated By an Order : {}".format(order))

# services Holdings

customerId="XXXXXXX"
order=espressoApi.holdings(customerId)
print("Holdings : {}".format(order))

# Script Master

exchange="MX"
order=espressoApi.master(exchange)
print("Script Master : {}".format(order))

# Scrip Master data by CSV-Without Access-Token

exchange="NC"
order=espressoApi.mastercsv(exchange)
print("Script Master CSV : {}".format(order))

# Historical Data
exchange="RN"
scripcode=1314
interval="daily"
order=espressoApi.historicaldata(exchange, scripcode, interval)
print("Holdings Data: {}".format(order))
