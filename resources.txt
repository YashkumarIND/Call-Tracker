import serpapi as serpapi
from serpapi import GoogleSearch

params = {
  "engine": "google_finance",
  "q": "RELIANCE:NSE",
  "api_key": "4bdc90ff4790171cf473075bcd717c27b3c25777d35ddefd07a3fd6187e8f6da"
}

search = GoogleSearch(params)
results = search.get_dict()
print(results["summary"]["price"])

# Ensure the tables are created
# with app.app_context():
#     db.create_all()

#     # Check if the default user exists, create if not
#     existing_user = User.query.filter_by(username='').first()
#     if not existing_user:
#         test_user = User(username='', password='')
#         db.session.add(test_user)
#         db.session.commit()




# Define the update_trades route
# @app.route('/api/update-trades', methods=['POST','GET'])
# def update_trades():
#     with app.app_context():
#         try:
#             # Retrieve active trades from the CallBook table where stop loss and target 2 are not hit
#             active_trades = CallBook.query.filter(CallBook.Status == 'Hold').all()

#             for trade in active_trades:
#                 # Retrieve trade details
#                 scrip_name = trade.ScripName
#                 position = trade.Position
#                 target1 = trade.Target1
#                 target2 = trade.Target2
#                 stop_loss = trade.StopLoss
#                 entry_price = trade.EntryPrice

#                 # Use Serpapi to get real-time data
#                 params = {
#                     "engine": "google_finance",
#                     "q": f"{scrip_name}:NSE",
#                     "api_key": ""
#                 }
#                 search = GoogleSearch(params)
#                 results = search.get_dict()
#                 price_string = results["summary"]["price"]
#                 clean_price_string = re.sub(r'[^\d.]', '', price_string)
#                 current_price = float(clean_price_string)

                

#                 # Determine trade status based on position and target conditions
#                 if position == 'Long':
#                     if current_price >= target1 and current_price < target2:
#                         status = 'Target 1 Hit'
#                     elif current_price >= target2:
#                         status = 'Target 2 Hit'
#                     elif current_price <= stop_loss:
#                         status = 'Stop Loss Hit'
#                     else:
#                         status = 'Hold'
#                 elif position == 'Short':
#                     if current_price <= target1 and current_price > target2:
#                         status = 'Target 1 Hit'
#                     elif current_price <= target2:
#                         status = 'Target 2 Hit'
#                     elif current_price >= stop_loss:
#                         status = 'Stop Loss Hit'
#                     else:
#                         status = 'Hold'
#                 else:
#                     status = 'Invalid Position'


#                 #GainLoss Percentage Calculation
#                 gain_loss = round(((current_price - entry_price) / entry_price * 100),2)

#                 # Update the status of the trade in the database
#                 trade.Status = status
#                 trade.GainLoss=gain_loss
#                 db.session.commit()

#             return jsonify({'message': 'Trades updated successfully'}), 200

#         except Exception as e:
#             # Handle the exception (e.g., log error)
#             return jsonify({'error': str(e)}), 500



from app import app
from models.models import db
from models.models import ScripCode
import csv
import ast
import json

# Define the path to the data file
data_file = 'scripcode.txt'

# Open the application context
with app.app_context():
    # Read data from the text file and populate the ScripCode table
    with open(data_file, 'r') as file:
        reader = csv.reader(file)
        header = next(reader)  # Skip the header row
        for row in reader:
            # Extract data from the row
            scrip_code = int(row[0])
            tick_size = float(row[1])
            inst_type = row[2]
            company_name = row[3]
            indices_str = row[4]
            industry = row[5]
            isin_code = row[6]
            trading_symbol = row[7]

            # Convert the indices string to a list
            indices = ast.literal_eval(indices_str)

            # Convert indices list to a JSON string
            indices_json = json.dumps(indices)

            # Create a new instance of the ScripCode model
            new_scrip_code = ScripCode(
                scrip_code=scrip_code,
                tick_size=tick_size,
                inst_type=inst_type,
                company_name=company_name,
                indices=indices_json,  # Use the JSON string
                industry=industry,
                isin_code=isin_code,
                trading_symbol=trading_symbol
            )

            # Add the new instance to the session and commit
            db.session.add(new_scrip_code)
            db.session.commit()

print("Data successfully inserted into the database.")


#ltp code:

import asyncio
import json
import websockets
import datetime


async def websocket_handler(share,access_token):
    access_token = access_token
    api_key=""
    if access_token:
        api_key = ""
        uri = f"wss://streams.myespresso.com/espstream/api/stream?ACCESS_TOKEN={access_token}&API_KEY={api_key}"
        feed = {"action": "feed", "key": ["ltp"], "value": [share]}

        async with websockets.connect(uri) as ws:
            await ws.send(json.dumps(feed))

            while True:
                try:
                    message = await ws.recv()
                    data = json.loads(message)
                    data=data["data"]
                    # Check if the received data is a list (JSON format)
                    if isinstance(data, list):
                        # Assuming the list contains a dictionary with key 'ltp', extract the 'ltp' value
                        ltp_value = data[0]['ltp']
                        print('LTP:', ltp_value)
                        return ltp_value

                    # Check if the received data is a dictionary (non-JSON format)
                    elif isinstance(data, dict) and 'status' in data and 'message' in data:
                        print("Received non-JSON data:", data['message'])

                except json.JSONDecodeError as e:
                    print("Received non-JSON data:", message)
                except Exception as ex:
                    print("An error occurred:", ex)
    else:
        print("No valid access token found.")


if __name__ == "__main__":
    asyncio.run(websocket_handler("NC25",access_token=))
